<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>yonglei的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yonglei89.github.io/"/>
  <updated>2019-11-15T07:46:34.584Z</updated>
  <id>https://yonglei89.github.io/</id>
  
  <author>
    <name>yonglei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nohup和&amp;有什么区别</title>
    <link href="https://yonglei89.github.io/2018/05/15/nohup-and-ad/"/>
    <id>https://yonglei89.github.io/2018/05/15/nohup-and-ad/</id>
    <published>2018-05-15T06:37:50.000Z</published>
    <updated>2019-11-15T07:46:34.584Z</updated>
    
    <content type="html"><![CDATA[<p>线上启动某个服务的时候我们经常会用到nohup和&amp;，那么nohup和&amp;究竟有什么区别呢？</p><p>先看一段测试代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"hello,%d\n"</span>,i++);</span><br><span class="line"> sleep(<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个输出hello与循环轮数的死循环程序，每输出一行就休眠1秒</p><p>使用./a.out前台运行程序，会是什么效果呢？<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/2.jpg" alt><br>程序每隔一秒会在终端输出一个字符串<br>此时如果<code>键入Ctrl+C</code>，程序会收到一个SIGINT信号，如果不做特殊处理，程序的默认行为时终止（如上图）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线上启动某个服务的时候我们经常会用到nohup和&amp;amp;，那么nohup和&amp;amp;究竟有什么区别呢？&lt;/p&gt;
&lt;p&gt;先看一段测试代码&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>线上问题排查，这些Linux命令你一定用得到</title>
    <link href="https://yonglei89.github.io/2018/03/22/linux-command/"/>
    <id>https://yonglei89.github.io/2018/03/22/linux-command/</id>
    <published>2018-03-22T04:08:15.124Z</published>
    <updated>2019-11-15T05:47:31.988Z</updated>
    
    <content type="html"><![CDATA[<p>线上问题排查，一下场景，你遇到过吗？</p><p>一、了解机器连接数情况<br>问题：192.168.1.10的sshd的端口是22，如何统计192.168.1.10的sshd服务各种状态（TIME_WAIT/CLOSE_WAIT/ESTABLISHED）的连接数。<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | grep 1.2.3.4:22 | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;’</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpta | grep ssh | egrep “TIME_WAIT | CLOSE_WAIT | ESTABLISHED”</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n [仅限于阿里云]</span><br></pre></td></tr></table></figure><p>说明：netstat是追查网络连接问题常用工具，和grep/awk结合更是神器，当然在阿里云上，还有更方便的方法。</p><p>二、从已经备份好的日志中查询数据<br>问题：从已备份的ais-2018-02-20.log.bz2日志种，找出包含关键字192.168.1.10的日志有多少条。<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzcat ais-2018-02-20.log.bz2|grep <span class="string">'192.168.1.10'</span>|wc -l</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzgrep <span class="string">'192.168.1.10'</span> ais-2018-02-20.log.bz2|wc -l</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less ais-2018-02-20.log.bz2|grep <span class="string">'192.168.1.10'</span>|wc -l</span><br></pre></td></tr></table></figure><p>说明：线上日志文件一般以bz2压缩后保留，如果解压查询，非常耗空间与时间，bzcat和bzgrep是研发同学必须掌握的工具。</p><p>三、备份服务的技巧<br>问题：打包备份/opt/web/ais_web目录，排除掉目录种的logs和目录，打包好的文件存放在/opt/backup目录下<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf /opt/backup/liuyl.tar.gz \ -exclude /opt/web/ais_web/logs \ /opt/web/ais_web</span><br></pre></td></tr></table></figure></p><p>说明：这个命令线上应用较为频繁，在项目需要打包迁移时，常常需要排除掉日志目录，exclude时需要掌握的参数。</p><p>四、查询线程数<br>问题：查询服务器运行服务的总线程数，当机器线程数超报警阀值时，能快速查出相关进程及线程信息<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -eLf|wc -l</span><br><span class="line">pstree -p|wc -l</span><br></pre></td></tr></table></figure></p><p>五、磁盘报警，清空最大文件<br>问题：找出服务器上，某个正在运行的tomcat产生的大量异常日志，找出该文件，并释放空间。不妨设该文件包含log关键字，并且大于1G。<br>常见方法：</p><h4 id="第一步，找到该文件"><a href="#第一步，找到该文件" class="headerlink" title="第一步，找到该文件"></a>第一步，找到该文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*log*"</span> | xargs ls -lSh | more </span><br><span class="line">du -a / | sort -rn |grep <span class="built_in">log</span> | more</span><br><span class="line">find / -name <span class="string">"*log*"</span> -size+1000M -<span class="built_in">exec</span> du -h&#123;&#125; \</span><br></pre></td></tr></table></figure><h4 id="第二步，将文件清空"><a href="#第二步，将文件清空" class="headerlink" title="第二步，将文件清空"></a>第二步，将文件清空</h4><p>假设找到的文件为a.log<br>正确的清空方式应该为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">""</span>&gt;a.log</span><br></pre></td></tr></table></figure></p><p>文件空间会立刻释放。<br>很多人会使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf a.log</span><br></pre></td></tr></table></figure></p><p>这样文件虽然删除，但是因tomcat服务仍在运行，空间不会立刻释放，需要重启tomcat才能将空间释放。</p><p>六、显示文件，过滤注释<br>问题：显示server.conf文件，屏蔽掉#号开头的注释行<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">"/^[#]/!p"</span> server.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">"/^#/d"</span> server.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">"^#"</span> server.conf</span><br></pre></td></tr></table></figure><p>七、磁盘IO异常排查<br>问题：磁盘IO异常如何排查，类似写入慢火当前使用率较高，请查出导致磁盘IO异常高的进场ID。<br>常见方法：</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -o</span><br></pre></td></tr></table></figure><p>查看当前正在写磁盘操作的所有进程ID信息</p><h4 id="第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统"><a href="#第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统" class="headerlink" title="第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统"></a>第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg 或 cat /var/<span class="built_in">log</span>/message</span><br></pre></td></tr></table></figure><p>看看是否有相关的磁盘异常报错，同时可以在写入慢的磁盘上touch一个空文件看看，是否磁盘故障导致无法写入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线上问题排查，一下场景，你遇到过吗？&lt;/p&gt;
&lt;p&gt;一、了解机器连接数情况&lt;br&gt;问题：192.168.1.10的sshd的端口是22，如何统计192.168.1.10的sshd服务各种状态（TIME_WAIT/CLOSE_WAIT/ESTABLISHED）的连接数。&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
