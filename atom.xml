<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>yonglei的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yonglei89.github.io/"/>
  <updated>2019-12-02T08:02:28.428Z</updated>
  <id>https://yonglei89.github.io/</id>
  
  <author>
    <name>yonglei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>故障转移，服务发现，负载均衡，居然都和它有关</title>
    <link href="https://yonglei89.github.io/2019/06/02/connection-pool/"/>
    <id>https://yonglei89.github.io/2019/06/02/connection-pool/</id>
    <published>2019-06-02T06:42:57.000Z</published>
    <updated>2019-12-02T08:02:28.428Z</updated>
    
    <content type="html"><![CDATA[<p>没错，说的就是连接池，玩互联网架构，连接池是必须要掌握的。<br><a id="more"></a></p><p><strong>什么是连接池？</strong><br>创建与管理连接缓冲池的技术，本质是资源复用，不用频繁创建与销毁连接，能提高性能。</p><p>微服务分层架构中，连接池扮演者极其重要的角色。<br><img src="//yonglei89.github.io/2019/06/02/connection-pool/1.jpg" alt><br>如上图：<br>（1）上层虚线框，是web集群；<br>（2）下层虚线框，是service集群；<br>（3）绿色框，代表一条上下游建立的连接；<br>（4）蓝色框，代表连接池;</p><p>此例中，一个调用方会与一个服务节点建立2条连接，服务集群共3个集群，故连接池总共6条连接，从c1到c6.</p><p>上层调用方，除了会从连接池中拿连接收发报文访问下游服务外，互联网架构中，<code>还有哪些技术点</code>与连接池相关呢？</p><p><strong>一、故障转义与服务发现</strong><br><img src="//yonglei89.github.io/2019/06/02/connection-pool/2.jpg" alt><br>如上图：<br>（1）故障转移，假如旧的服务节点s1出现了故障，c1和c2连接失效，会被从连接池中剔除，后续请求不会再发生到故障的节点中；<br>（2）假如新的服务节点s4上线，c7和c8连接建立，会被加入到连接池中来，后续请求会发送到新增的节点中；</p><p>动态删除连接与新增连接，这就是动<code>态连接池</code>。</p><p><strong>二、负载均衡</strong><br>采用<code>轮询的策略</code>，逐个使用连接池中的连接，可以实现对下游服务访问的负载均衡。</p><p>采用完全随机的策略，也能实现负载均衡。<br><img src="//yonglei89.github.io/2019/06/02/connection-pool/3.jpg" alt><br>如上图：<br>给每个连接一个相同的权重，取连接访问下游时，采用一个随机算法，落到哪个格子用哪个连接，还是上面的例子：<br>n = random() % <code>6</code> + 1;<br>当<br>n = [1,2],访问s1;<br>n = [3,4],访问s2;<br>n = [5,6],访问s3;</p><p><code>3个区间的宽带相同，即落到某个服务的概率相等</code>，负载时均衡的。</p><p>那么，<strong>如果服务节点的服务能力有差异，有的处理能力强，有的处理能力弱，怎么办呢？</strong></p><p><strong>三、静态权重负载均衡</strong><br><img src="//yonglei89.github.io/2019/06/02/connection-pool/4.jpg" alt><br>如上图：<br>给每个服务配置一个不同的权重，连接池初始化时，不同服务的区间大小有差异，取连接访问下游时，落到某个格子的概率也会有差异：<br>n = random() % 16 + 1;<br>n = [1,2],访问s1;<br>n = [3,6],访问s2;<br>n = [7,16],访问s3;</p><p><code>3个区间的宽度与服务的权重成正比，即落到某个服务的概率等同权重</code>。<br>那么，<strong>如果服务节点的服务能力有差异，但又很难用静态权重标识，怎么办呢？</strong></p><p><strong>四、动态权重负载均衡</strong><br><img src="//yonglei89.github.io/2019/06/02/connection-pool/5.jpg" alt><br>如上图：连接池初始化时，为连接分配一个动态的权重。</p><p>仍按照之前的方法分配负载，只是：<br>（1）连接处理超时，动态权重下降；<br>（2）连接处理成功，动态权重上升；</p><p>注：本文来自于58沈剑，公号<code>架构师之路</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没错，说的就是连接池，玩互联网架构，连接池是必须要掌握的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="连接池" scheme="https://yonglei89.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库设计中，最重要的“基概”</title>
    <link href="https://yonglei89.github.io/2019/03/26/db-d/"/>
    <id>https://yonglei89.github.io/2019/03/26/db-d/</id>
    <published>2019-03-26T13:09:41.000Z</published>
    <updated>2019-12-02T07:58:44.659Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、单库架构</strong><br><img src="//yonglei89.github.io/2019/03/26/db-d/1.jpg" alt><br><code>单库架构</code>，是业务初期最常见的数据库架构<br>&emsp;● user-service：用户中心服务，对调用者提供友好的RPC接口<br>&emsp;● user-db：一个库进行数据库存储<br><a id="more"></a><br><strong>二、分组架构</strong><br><img src="//yonglei89.github.io/2019/03/26/db-d/2.jpg" alt><br><code>数据库分组架构</code>,即最常见的一主多从，主从同步，读写分离数据库架构：<br>&emsp;● user-service：依旧是用户中心服务<br>&emsp;● user-db-M(master)：主库，提供数据库写服务。<br>&emsp;● user-db-S(slave)：从库，提供数据库读服务。<br>主和从构成的数据库集群称为“一组”。</p><p>同一个组里的数据库集群：<br>&emsp;● 主从之间通过binlog进行数据同步<br>&emsp;● 多个实例数据库结构完全相同<br>&emsp;● 多个实例存储的数据也完全相同，本质上是将数据进行复制</p><p><strong>数据库分组架构究竟解决什么问题？</strong><br>大部分互联网业务读多写少，数据库的读往往最先成为性能瓶颈，如果希望：<br>&emsp;● 线性提升数据库读性能<br>&emsp;● 通过消除读写锁冲突提升数据库写性能。<br>&emsp;● 通过冗余从库实现数据的“读高可用”<br>此时可以使用分组架构，需要注意的是，分组架构中，数据库的主库依然是写单点。</p><p><code>一句话总结，分组解决的是“数据库读写高并发量高”问题，常实施的架构设计。</code></p><p><strong>三、分片架构</strong><br><img src="//yonglei89.github.io/2019/03/26/db-d/3.jpg" alt><br><code>数据库分片架构</code>，是大伙最常说的水平切分（sharding）<br>&emsp;● user-service：依旧是用户中心服务<br>&emsp;● user-db1：水平切分成2份中的第一份<br>&emsp;● user-db2：水平切分成2份中的第二份<br>分片后，多个数据库实例也会构成一个数据库集群。</p><p><strong>水平切分，到底是分库还是分表</strong><br>强烈建议分库，因为：<br>&emsp;● 分表依然公用要给数据库文件，仍然有磁盘IO的竞争<br>&emsp;● 分库能够很容易的将数据迁移到不同数据库实例，甚至数据库机器上，扩展性好</p><p><strong>如何进行水平切分</strong><br>常见的方法是“范围法”和“哈希法”：<br><img src="//yonglei89.github.io/2019/03/26/db-d/4.jpg" alt><br>范围法如上，以用户中心的业务主键uid为划分依据，将数据水平切分到两个数据库实例上区。</p><p><img src="//yonglei89.github.io/2019/03/26/db-d/5.jpg" alt><br>哈希法如上，也是以用户中心的业务主键uid为划分依据，将数据水平切分到两个数据库实例上去。</p><p>哈希法在互联网数据库架构中，使用较为广泛。</p><p>分片架构，同一个及群里的各个分片：<br>&emsp;● 多个实例之间本身不直接产生联系，不像主从间有binlog同步<br>&emsp;● 多个实例数据库结构，也完全相同<br>&emsp;● 多个实例存储的数据之间没有交集，所有实例间数据并集构成全局数据</p><p><strong>分片架构究竟解决什么问题</strong><br>大部分互联网业务数据量很大，单库容量容易成为瓶颈，此时通过分片可以：<br>&emsp;● 线性提升数据库写性能，需要注意的是，分组架构是不能线性提升数据库写性能的。<br>&emsp;● 降低单库数据容量</p><p><code>一句话总结，分片解决的是“数据库数据容量大”问题，常实施的架构设计。</code></p><p><strong>四、分组+分片架构</strong><br><img src="//yonglei89.github.io/2019/03/26/db-d/6.jpg" alt><br>如果业务读写并发量很高，数据量也很大，通常需要实施分组+分片的数据库架构：<br>&emsp;● 通过分片来降低单库的数据量，线性提升数据库的写性能。<br>&emsp;● 通过分组来线性提升数据库的读性能，保证读库的高可用</p><p><strong>五、垂直切分</strong><br><code>数据库垂直切分，也是一类常见的数据库架构设计，垂直切分一般和业务结合比较紧密</code><br><img src="//yonglei89.github.io/2019/03/26/db-d/7.jpg" alt><br>还是以用户中心为例，可以这么进行垂直切分：<br>User_Base(uid,uname,passwd,sex,age,…)<br>&emsp;● 垂直切分开的表，主键都是uid<br>&emsp;● 登录名，密码，性别，年龄等属性放在一个垂直表（库）里<br>&emsp;● 自我介绍，个人签名等属性放在另一个垂直表（库）里</p><p>**如何进行垂直切分？<br>根据业务对数据进行垂直切分时，一般要考虑属性的“长度”和“访问频度”两个因素：<br>&emsp;● 长度较短，访问频率较高的放在一起<br>&emsp;● 长度较长，访问频度较低的放在一起<br>这是因为，数据库以行（row）为单位，将数load到内存（buffer）里，在内存容量有限的情况下，长度短且访问频度高的属性，内存能够load更多的数据，命中率会更高，磁盘IO会减少，数据库的性能会提示。</p><p>垂直切分和水平切分有相似的地方，又不太相同：<br>&emsp;● 多个实例之间也不直接产生联系，即没有binlog同步<br>&emsp;● 多个实例数据库结构，都不一样<br>&emsp;● 多个实例存储的数据之间至少有一列交集，一般来说是业务主键，所有实例间数据并集构成全局数据</p><p><strong>垂直切分解决什么问题？</strong><br>垂直切分即可以降低单库的数据量，还可以降低磁盘IO从而提升吞吐量，但它与业务结合比较紧密，并不是所有业务都能够精选垂直切分的。</p><p>简单总结：<br>&emsp;● 业务初期用单库<br>&emsp;● 读压力大，读高可用，用分组<br>&emsp;● 数据量大，写线性扩容，用分片<br>&emsp;● 属性短，访问频度高的属性，垂直切分到一起</p><p>注：本文来自于58沈剑，公号<code>架构师之路</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、单库架构&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;//yonglei89.github.io/2019/03/26/db-d/1.jpg&quot; alt&gt;&lt;br&gt;&lt;code&gt;单库架构&lt;/code&gt;，是业务初期最常见的数据库架构&lt;br&gt;&amp;emsp;● user-service：用户中心服务，对调用者提供友好的RPC接口&lt;br&gt;&amp;emsp;● user-db：一个库进行数据库存储&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="database" scheme="https://yonglei89.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>nohup和&amp;有什么区别</title>
    <link href="https://yonglei89.github.io/2018/05/15/nohup-and-ad/"/>
    <id>https://yonglei89.github.io/2018/05/15/nohup-and-ad/</id>
    <published>2018-05-15T06:37:50.000Z</published>
    <updated>2019-11-18T04:37:36.946Z</updated>
    
    <content type="html"><![CDATA[<p>线上启动某个服务的时候我们经常会用到nohup和&amp;，那么<code>nohup和&amp;究竟有什么区别呢</code>？</p><p>先看一段测试代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"hello,%d\n"</span>,i++);</span><br><span class="line"> sleep(<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这是一个输出hello与循环轮数的死循环程序，每输出一行就休眠1秒</p><p><strong>使用./a.out前台运行程序，会是什么效果呢？</strong><br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/2.jpg" alt><br>程序每隔一秒会在终端输出一个字符串<br>此时如果<code>键入Ctrl+C</code>，程序会收到一个SIGINT信号，如果不做特殊处理，程序的默认行为时<code>终止</code>（如上图）</p><p>**使用./a.out&amp;后台运行程序，会是什么效果呢<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/3.jpg" alt><br>如上图<br>&emsp;● 首先会在终端显示进程号是32389<br>&emsp;● 键入<code>Ctrl+C</code>，发出SIGINT信号，<code>程序会继续运行</code><br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/4.jpg" alt><br>ps确认一下，确认进程依然在运行，进程号是32389<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/5.jpg" alt><br>此时如果关掉session，程序会收到一个SIGHUP信号，此时会怎么样呢？<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/6.jpg" alt><br>ps再次确认，可以看到<code>关闭session</code>之后，进程号是32389的a.out的<code>进程也关闭了</code>。</p><p><strong>使用nohup ./a.out又会是什么效果呢？</strong><br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/7.jpg" alt><br>使用nohup运行程序a.out，会发现：<br>&emsp;● 前台没有出现进程号<br>&emsp;● 有一个“忽略输入，输出至nohup.out”的提示<br>&emsp;● hello的输出也没有出现在前台</p><p><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/8.jpg" alt><br>手动ps看进程号，这次a.out的进程号是32437<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/9.jpg" alt><br>此时如果关掉session，程序会收到一个SIGHUP信号，程序会不会关闭呢？<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/10.jpg" alt><br><code>关掉session</code>后，再次ps看一下，ID为32437的a.out<code>进程还在</code>。<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/11.jpg" alt><br>这些只能通过kill把程序干掉了，killall之后，ps查看进程已经关闭。<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/12.jpg" alt><br>killall之后，查看发现<code>多了一个nohup.out文件</code>，不过这个文件的大小是0，有点奇怪，启动程序的时候，明明小时了“appending output to nohup.out”呀，先把问题遗留在这，测试一下Ctrl+C。<br>仍如上图，使用nohup启动a.out，如果<code>键入Ctrl+C</code>，程序收到SIGINT信号后，直接<code>关闭了</code>。</p><p><strong>最后测试一下nohup和&amp;同时使用，即用nohup ./a.out &amp;运行程序，又会是什么效果呢？</strong><br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/13.jpg" alt><br>使用nohup ./a.out &amp;运行程序后，可以看到：<br>&emsp;● 会在终端显示进程号是32524<br>&emsp;● 也会有一个“忽略输入，输出至nohup.out”的提示</p><p>键入Ctrl + C，发送SIGINT信号，似乎没反应。<br>关闭session，发送SIGHUP信号，再来看看。<br><img src="//yonglei89.github.io/2018/05/15/nohup-and-ad/14.jpg" alt><br>ID为32524的进程依然存在，后续也只能用kill来关闭它</p><p><strong>结论</strong><br>使用<code>&amp;</code>后台运行程序<br>&emsp;● 结果会<code>输出到终端</code><br>&emsp;● 使用Ctrl + C发送<code>SIGNT信号，程序免疫</code><br>&emsp;● 关闭session发送<code>SIGHUP信号，程序关闭</code></p><p>使用<code>nohup</code>运行程序：<br>&emsp;● 结果默认会<code>输出到nohup.out</code><br>&emsp;● 使用Ctrl + C发送<code>SIGINT信号，程序关闭</code><br>&emsp;● 关闭session发送<code>SIGHUP信号，程序免疫</code></p><p><strong>平日线上经常使用nohup和&amp;配合来启动程序</strong><br>&emsp;● 同时免疫SIGINT和SIGHUP信号</p><p>同时，还有一个最佳实践：<br>&emsp;● 不要将信息输出到终端标准输出，标准错误输出，而要<code>用日志组件将信息记录到日志里</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线上启动某个服务的时候我们经常会用到nohup和&amp;amp;，那么&lt;code&gt;nohup和&amp;amp;究竟有什么区别呢&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;先看一段测试代码&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello,%d\n&quot;&lt;/span&gt;,i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nohup" scheme="https://yonglei89.github.io/tags/nohup/"/>
    
  </entry>
  
  <entry>
    <title>线上问题排查，这些Linux命令你一定用得到</title>
    <link href="https://yonglei89.github.io/2018/03/22/linux-command/"/>
    <id>https://yonglei89.github.io/2018/03/22/linux-command/</id>
    <published>2018-03-22T04:08:15.124Z</published>
    <updated>2019-11-19T08:47:12.682Z</updated>
    
    <content type="html"><![CDATA[<p>线上问题排查，一下场景，你遇到过吗？</p><p>一、了解机器连接数情况<br>问题：192.168.1.10的sshd的端口是22，如何统计192.168.1.10的sshd服务各种状态（TIME_WAIT/CLOSE_WAIT/ESTABLISHED）的连接数。<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | grep 1.2.3.4:22 | awk <span class="string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;’</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnpta | grep ssh | egrep “TIME_WAIT | CLOSE_WAIT | ESTABLISHED”</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n [仅限于阿里云]</span><br></pre></td></tr></table></figure><p>说明：netstat是追查网络连接问题常用工具，和grep/awk结合更是神器，当然在阿里云上，还有更方便的方法。</p><p>二、从已经备份好的日志中查询数据<br>问题：从已备份的ais-2018-02-20.log.bz2日志种，找出包含关键字192.168.1.10的日志有多少条。<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzcat ais-2018-02-20.log.bz2|grep <span class="string">'192.168.1.10'</span>|wc -l</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bzgrep <span class="string">'192.168.1.10'</span> ais-2018-02-20.log.bz2|wc -l</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less ais-2018-02-20.log.bz2|grep <span class="string">'192.168.1.10'</span>|wc -l</span><br></pre></td></tr></table></figure><p>说明：线上日志文件一般以bz2压缩后保留，如果解压查询，非常耗空间与时间，bzcat和bzgrep是研发同学必须掌握的工具。</p><p>三、备份服务的技巧<br>问题：打包备份/opt/web/ais_web目录，排除掉目录种的logs和目录，打包好的文件存放在/opt/backup目录下<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf /opt/backup/liuyl.tar.gz \ -exclude /opt/web/ais_web/logs \ /opt/web/ais_web</span><br></pre></td></tr></table></figure></p><p>说明：这个命令线上应用较为频繁，在项目需要打包迁移时，常常需要排除掉日志目录，exclude时需要掌握的参数。</p><p>四、查询线程数<br>问题：查询服务器运行服务的总线程数，当机器线程数超报警阀值时，能快速查出相关进程及线程信息<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -eLf|wc -l</span><br><span class="line">pstree -p|wc -l</span><br></pre></td></tr></table></figure></p><p>五、磁盘报警，清空最大文件<br>问题：找出服务器上，某个正在运行的tomcat产生的大量异常日志，找出该文件，并释放空间。不妨设该文件包含log关键字，并且大于1G。<br>常见方法：</p><h4 id="第一步，找到该文件"><a href="#第一步，找到该文件" class="headerlink" title="第一步，找到该文件"></a>第一步，找到该文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*log*"</span> | xargs ls -lSh | more </span><br><span class="line">du -a / | sort -rn |grep <span class="built_in">log</span> | more</span><br><span class="line">find / -name <span class="string">"*log*"</span> -size+1000M -<span class="built_in">exec</span> du -h&#123;&#125; \</span><br></pre></td></tr></table></figure><h4 id="第二步，将文件清空"><a href="#第二步，将文件清空" class="headerlink" title="第二步，将文件清空"></a>第二步，将文件清空</h4><p>假设找到的文件为a.log<br>正确的清空方式应该为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">""</span>&gt;a.log</span><br></pre></td></tr></table></figure></p><p>文件空间会立刻释放。<br>很多人会使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf a.log</span><br></pre></td></tr></table></figure></p><p>这样文件虽然删除，但是因tomcat服务仍在运行，空间不会立刻释放，需要重启tomcat才能将空间释放。</p><p>六、显示文件，过滤注释<br>问题：显示server.conf文件，屏蔽掉#号开头的注释行<br>常见方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">"/^[#]/!p"</span> server.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">"/^#/d"</span> server.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">"^#"</span> server.conf</span><br></pre></td></tr></table></figure><p>七、磁盘IO异常排查<br>问题：磁盘IO异常如何排查，类似写入慢火当前使用率较高，请查出导致磁盘IO异常高的进场ID。<br>常见方法：</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -o</span><br></pre></td></tr></table></figure><p>查看当前正在写磁盘操作的所有进程ID信息</p><h4 id="第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统"><a href="#第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统" class="headerlink" title="第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统"></a>第二步：如果此时各项写入指标都很低，基本没有大的写入操作，则需要排查磁盘自身，可以查看系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg 或 cat /var/<span class="built_in">log</span>/message</span><br></pre></td></tr></table></figure><p>看看是否有相关的磁盘异常报错，同时可以在写入慢的磁盘上touch一个空文件看看，是否磁盘故障导致无法写入。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线上问题排查，一下场景，你遇到过吗？&lt;/p&gt;
&lt;p&gt;一、了解机器连接数情况&lt;br&gt;问题：192.168.1.10的sshd的端口是22，如何统计192.168.1.10的sshd服务各种状态（TIME_WAIT/CLOSE_WAIT/ESTABLISHED）的连接数。&lt;br&gt;常见方法：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -n | grep 1.2.3.4:22 | awk &lt;span class=&quot;string&quot;&gt;&#39;/^tcp/ &amp;#123;++S[$NF]&amp;#125; END &amp;#123;for(a in S) print a, S[a]&amp;#125;’&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="shell" scheme="https://yonglei89.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
